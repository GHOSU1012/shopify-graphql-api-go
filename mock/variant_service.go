// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/r0busta/go-shopify-graphql/v5 (interfaces: VariantService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/r0busta/go-shopify-graphql-model/v2/graph/model"
)

// MockVariantService is a mock of VariantService interface.
type MockVariantService struct {
	ctrl     *gomock.Controller
	recorder *MockVariantServiceMockRecorder
}

// MockVariantServiceMockRecorder is the mock recorder for MockVariantService.
type MockVariantServiceMockRecorder struct {
	mock *MockVariantService
}

// NewMockVariantService creates a new mock instance.
func NewMockVariantService(ctrl *gomock.Controller) *MockVariantService {
	mock := &MockVariantService{ctrl: ctrl}
	mock.recorder = &MockVariantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariantService) EXPECT() *MockVariantServiceMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockVariantService) Update(arg0 model.ProductVariantInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVariantServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVariantService)(nil).Update), arg0)
}
